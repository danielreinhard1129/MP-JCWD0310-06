// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  fullName         String
  email            String        @unique
  password         String
  avatar           String?
  role             String        @default("user")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  referralCode     String?       @unique
  point            Int
  pointExpiredDate DateTime
  userReward       Boolean       @default(false)
  Event            Event[]
  Transaction      Transaction[]
  Voucher          Voucher[]
  UserCoupon       UserCoupon[]
  UserVoucher      UserVoucher[]
  Coupon           Coupon[]
  Review           Review[]

  @@map("users")
}

model Event {
  id            Int       @id @default(autoincrement())
  title         String
  description   String    @db.LongText()
  thumbnail_url String
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  limit         Int
  isAvailable   Boolean   @default(true)
  start_date    DateTime
  end_date      DateTime?
  time          String
  location      String
  address       String?
  category      String
  price         Int

  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]
  Voucher     Voucher[]
  Review      Review[]

  @@map("events")
}

model UserCoupon {
  id       Int     @id @default(autoincrement())
  userId   Int
  couponId Int
  isUse    Boolean

  user        User          @relation(fields: [userId], references: [id])
  coupon      Coupon        @relation(fields: [couponId], references: [id])
  Transaction Transaction[]

  @@map("userCoupons")
}

model Coupon {
  id             Int          @id @default(autoincrement())
  code           String       @unique
  expirationDate DateTime
  discountAmount Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  UserCoupon     UserCoupon[]
  isUse          Boolean

  @@map("coupons")
}

model UserVoucher {
  id        Int     @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUse     Boolean

  user        User          @relation(fields: [userId], references: [id])
  voucher     Voucher       @relation(fields: [voucherId], references: [id])
  Transaction Transaction[]

  @@map("userVouchers")
}

model Voucher {
  id             Int      @id @default(autoincrement())
  code           String
  discountAmount Int
  limit          Int
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  eventId        Int

  user        User          @relation(fields: [userId], references: [id])
  event       Event         @relation(fields: [eventId], references: [id])
  UserVoucher UserVoucher[]

  @@map("vouchers")
}

model Transaction {
  id            Int               @id @default(autoincrement())
  invoice       String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  status        TransactionStatus @default(PENDING)
  total         Int
  userId        Int
  eventId       Int
  paymentProof  String            @default("")
  userCouponId  Int?
  userVoucherId Int?
  qty           Int
  isPointUse    Boolean
  isUseCoupon   Boolean
  isUseVoucher  Boolean

  userCoupon  UserCoupon?  @relation(fields: [userCouponId], references: [id])
  event       Event        @relation(fields: [eventId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  userVoucher UserVoucher? @relation(fields: [userVoucherId], references: [id])

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  COMPLETE
  WAITING
  CANCELLED
  EXPIRED
}

model Review {
  id      Int    @id @default(autoincrement())
  rating  Int
  comment String
  eventId Int
  userId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}
